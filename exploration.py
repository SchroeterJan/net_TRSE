from resources.exp_resources import *


def se_year():
    year_list = range(2015, 2021, 1)
    table = np.empty(shape=(len(year_list), len(census_variables)))

    for i, year in enumerate(year_list):
        print('CHECK MISSING DATA FOR YEAR: ' + str(year))
        se_prep = SENeighborhoods()
        se_prep.crop_se(year=year)
        se_prep.geo_data = se_prep.geo_data.set_index(keys=column_names['geo_id_col'], drop=False)

        se_prep.filter_areas()

        # keep only relevant socio-economic variables
        for variable in census_variables:
            se_prep.extract_var(var=variable)

        missing = pd.DataFrame(se_prep.geo_data)
        missing = missing.filter(items=census_variables)
        missing = missing.apply(pd.to_numeric)
        table[i] = missing.isna().sum()

    frame = pd.DataFrame(data=table, index=year_list, columns=census_variables)
    frame['Total'] = frame.sum(axis=1)
    print(frame.to_latex(index=True))


def sna_links(handler):
    flow_prep = PassengerCounts()
    flow_prep.area_stop_matching()

    links = np.asarray(flow_prep.stop_area_association == True).nonzero()
    geo_df = geopandas.GeoDataFrame(crs=crs_proj,
                                    geometry=geopandas.GeoSeries.from_wkt(handler.neighborhood_se.geometry))

    stop_points = [Point(float(lng), float(lat)) for lng, lat in zip(
        flow_prep.stops[column_names['stop_lng']],
        flow_prep.stops[column_names['stop_lat']])]
    stop_points = geopandas.GeoSeries(stop_points, crs='epsg:4326')

    if crs_proj != None:
        stop_points = stop_points.to_crs(crs_proj)
    elif crs_proj == "":
        print("Polygon coordinates given in espg:4326")
    else:
        print('Geographic system is wrongly defined')

    lines = []
    for i in range(len(links[0])):
        lines.append(LineString([stop_points[links[1][i]], geo_df.centroid[links[0][i]]]))
    lines = geopandas.GeoSeries(lines)
    lines.to_file("sna.geojson", driver='GeoJSON')


def clust_val(cust_adj, geo_df):
    std_list = []
    ssd_list = []
    ch_list = []
    db_list = []
    sil_list = []
    no_clust = 2

    nan_rows = pd.isnull(handler.model_).any(axis=1)
    ch_matrix = handler.model_[~nan_rows]

    while no_clust <= 60:
        print(str(no_clust))
        skat_res = skater_clust(c=no_clust, adj=cust_adj.adj_g, geo_df=geo_df)

        stats = skat_stats(geo_df=geo_df,
                           model=census_variables,
                           skat_labels=skat_res.labels_,
                           or_data=handler.neighborhood_se[census_variables],
                           spanning=skat_lib.SpanningForest(**skat_res.spanning_forest_kwds),
                           print_latex=False)

        std_skat = stats['#Vertices'].std()
        ssd_skat = stats['SSD']['overall']

        std_list.append(std_skat)
        ssd_list.append(ssd_skat)

        db_list.append(metrics.davies_bouldin_score(X=ch_matrix[census_variables].values,
                                                   labels=skat_res.labels_[~nan_rows]))

        ch_list.append(metrics.calinski_harabasz_score(X=ch_matrix[census_variables].values,
                                                      labels=skat_res.labels_[~nan_rows]))

        sil_list.append(metrics.silhouette_score(X=ch_matrix[census_variables].values,
                                                 labels=skat_res.labels_[~nan_rows]))

        no_clust += 1

    print(std_list)
    print(ssd_list)

    df = pd.DataFrame(columns=['sil', 'db', 'ch'])
    df['sil'] = sil_list
    df['db'] = db_list
    df['ch'] = ch_list
    df.to_csv(path_or_buf=os.path.join(path_experiments, 'clust_val_scores_new.csv'), index=False)


    # sil_list = [0.22118633427355566, 0.22118633427355566, 0.22118633427355566, 0.15269366089283506, 0.15006885802946704, 0.14399401272453471, 0.07012901134767123, 0.020673749825380127, 0.020673749825380127, 0.012406808792345632, -0.20810364862894634, -0.20810364862894634, -0.2553692114815241, -0.2626632029886848, -0.2627159087368904, -0.2705718658169019, -0.26768315357663325, -0.26119807553420105, -0.24798550759281365, -0.2508402474426239, -0.24396620832615382, -0.24193786782865903, -0.2995364748446231, -0.29507754063847913, -0.2842606035256934, -0.288786762093491, -0.288786762093491, -0.288786762093491, -0.29213850567117244, -0.29213850567117244, -0.2892136290743805, -0.2844198213131269, -0.2844198213131269, -0.27851432506184026, -0.27851432506184026, -0.28051783617573944, -0.2841937721666401, -0.2738390285403339, -0.2746761832474103, -0.30664091866345106, -0.3338826564188573, -0.3338826564188573, -0.3445802148786286, -0.347285760589586, -0.3467536328334411, -0.35627064692272004, -0.3531629025977028, -0.35195807157893466, -0.3533754920843631, -0.3533754920843631, -0.3533754920843631, -0.3548179019573724, -0.3548179019573724, -0.35699035850127464, -0.35424028728468265, -0.35424028728468265, -0.35424028728468265, -0.35424028728468265, -0.3496872120874082]
    # db_list = [1.2763402372494639, 1.2763402372494639, 1.2763402372494639, 5.982513234402949, 5.417538963057879, 6.302922280293635, 5.351786504988177, 4.860538304177622, 4.860538304177622, 4.685498678328692, 4.303883160110045, 4.303883160110045, 4.058709262963633, 3.7334988242721256, 3.1569961796543944, 3.035902444958969, 2.687711629601977, 2.8474800645354406, 3.1568256559091177, 3.114023188502964, 3.529427201905336, 4.292629802277133, 3.8236760995280683, 3.687453061067896, 4.2202795828124815, 4.581742011162619, 4.581742011162619, 4.581742011162619, 4.179835397659588, 4.179835397659588, 4.308480879105607, 4.269025612891112, 4.269025612891112, 4.25179687763452, 4.25179687763452, 4.028949287703443, 4.116089769881279, 4.726913462590874, 4.854529851413803, 3.640643918435723, 3.6705047122181136, 3.6705047122181136, 3.9331844873332322, 3.876414655326757, 3.837599368902477, 3.5926453704657098, 3.715592236615239, 3.566524611977202, 3.596209436372086, 3.596209436372086, 3.596209436372086, 3.5073467406937127, 3.5073467406937127, 3.3594291466625656, 3.34672022161435, 3.34672022161435, 3.34672022161435, 3.34672022161435, 3.323773119120205]
    # ch_list = [58.35979951204642, 58.35979951204642, 58.35979951204642, 44.342110092823134, 50.383324128935804, 55.065223379718645, 53.25577929300103, 49.424593212307194, 49.424593212307194, 47.13990449590615, 41.2286916466272, 41.2286916466272, 39.571006986105516, 36.15618413409445, 35.409292155156116, 34.62560417694091, 34.263138276969386, 33.26870024650291, 32.73095309090051, 32.49365702622715, 32.45795808453813, 31.56265700092637, 31.683818210613577, 31.991978204601402, 33.328100353863, 34.5035371133316, 34.5035371133316, 34.5035371133316, 34.772485334622694, 34.772485334622694, 35.06209816459844, 35.25411599768591, 35.25411599768591, 35.13580917834735, 35.13580917834735, 35.10045418169568, 34.94238743677276, 34.54896864412357, 34.45286819090809, 34.36920852449528, 34.19147979352749, 34.19147979352749, 34.11746046919395, 33.30788251381512, 32.996372126250975, 33.21038936093384, 33.17490767416819, 32.77540895485186, 32.646365343298164, 32.646365343298164, 32.646365343298164, 32.670966725590404, 32.670966725590404, 32.58462371770285, 32.598778972207924, 32.598778972207924, 32.598778972207924, 32.598778972207924, 33.181704904715396]

    # sil_list =[0.19496540781937238, 0.19700826477013061, 0.19700826477013061, 0.19700826477013061, 0.19700826477013061, 0.1296334749332404, 0.12931266205361555, 0.13350282904965416, 0.13350282904965416, 0.11716441777359365, 0.021371950253355056, -0.0026827796472138643, -0.05184289879507441, -0.0519730897979698, -0.05877002856243575, -0.054358448777962316, -0.0550047668968209, -0.04773112983478184, -0.05435733268560301, -0.10363151566170196, -0.10487267604258528, -0.16993622298446703, -0.18824246377907813, -0.18652988991846922, -0.18632606252423933, -0.18333883830983497, -0.18117210766705802, -0.20736888962361866, -0.19862773089255184, -0.21696484798256774, -0.2589621410458415, -0.2518182621644146, -0.2564239984956197, -0.25148171122834184, -0.2756829633275896, -0.2791688547899935, -0.2791688547899935, -0.2791688547899935, -0.27520067002055726, -0.28915413006845503, -0.29566910731214346, -0.29566910731214346, -0.29547163111972163, -0.29555888768148125, -0.2947682527396263, -0.29453550635772974, -0.3033969290438877, -0.3033969290438877, -0.297811058617437, -0.297811058617437, -0.2983716871906182, -0.29506212794115994, -0.2996844706682379, -0.3022381432962381, -0.30133078386406215, -0.30133078386406215, -0.3079133710056116, -0.30579506685170327, -0.3156906553020392]
    # db_list = [1.310795874851597, 1.0740683006402385, 1.0740683006402385, 1.0740683006402385, 1.0740683006402385, 2.306312783675591, 3.337083261450856, 4.713962417998082, 4.713962417998082, 3.411913443978441, 3.9849153226242127, 3.6676036639023732, 3.580742776315083, 3.6045049481597005, 3.9447575842148854, 3.712519573144579, 3.678167141358887, 3.472271849379491, 3.343449975172678, 3.2621786973890012, 3.3487732608318175, 3.6700702688033844, 3.6127581137033538, 3.6336120088986688, 3.73251435654776, 3.6494022263078945, 3.075043772500411, 3.0199976675035076, 3.408631492385986, 3.201539492198936, 3.2466920268968282, 3.5555206899538616, 3.455206529019691, 3.208040276278221, 3.150656996876756, 2.820764929173691, 2.820764929173691, 2.820764929173691, 2.8618937387917747, 2.8473384361336187, 2.8314415679115266, 2.8314415679115266, 2.8244155239760866, 2.8505660912978943, 2.7903031936964324, 2.9223157084861264, 3.0319908103188387, 3.0319908103188387, 3.0866870433262, 3.0866870433262, 3.2050187074975045, 3.098342055084611, 3.067633501926536, 3.496994337816185, 3.613521978900207, 3.613521978900207, 3.3741377888761632, 3.5824209100600557, 3.7657918829683634, 3.333044834977238, 3.333044834977238, 3.5162245164776356, 3.6633258081448203, 3.485658357808851, 3.485658357808851, 3.4624156892112588, 3.3724404649511235, 3.3724404649511235, 3.3133264023244826]
    # ch_list = [49.166556814552244, 58.16862504009793, 58.16862504009793, 58.16862504009793, 58.16862504009793, 55.60032005121745, 55.96951802001429, 61.55161236700713, 61.55161236700713, 58.51709011255213, 53.23498831848449, 49.91977118039292, 46.44387784130733, 44.470118867824475, 43.47342090121672, 42.27973547927433, 40.43759773066444, 39.732936066616766, 38.796958701651036, 38.07252470018797, 37.250517276001986, 37.16490348422594, 36.997726474730726, 36.979376397532704, 37.988271921034894, 36.966608812437, 36.68900590539053, 36.46248874455498, 36.75914342733096, 37.620808317227, 37.01866661788733, 36.7796241093802, 37.095627678838134, 37.18502671164866, 37.72519799593742, 37.793645649016156, 37.793645649016156, 37.793645649016156, 37.57889566946963, 36.41379727870704, 36.2238982571733, 36.2238982571733, 35.73766877767791, 35.629098532152895, 35.6342364428387, 35.29054926968965, 35.19102120664188, 35.19102120664188, 35.43154062879522, 35.43154062879522, 35.444366458400765, 35.4716349096296, 35.386559974882196, 35.179716501786864, 35.19011808353446, 35.19011808353446, 35.39064406469346, 35.49410626751077, 37.151773340169655, 37.32303897425339, 37.32303897425339, 37.432888107799094, 37.51690236807191, 38.84761345022345, 38.84761345022345, 38.9708983539591, 39.00679341951301, 39.00679341951301, 38.92079568243865]

    # std_list = [160.5, 157.12061892592794, 147.26909893117428, 137.17638280695405, 128.28538065764232, 103.10842323045887, 92.94815424621287, 76.0440093629998, 71.99368027820219, 69.5562083312787, 67.01798059533668, 64.11869541442925, 57.63754622846201, 55.705734799779215, 54.14733228994432, 52.097260653963936, 49.448969832989036, 48.37669594198386, 47.14284145021383, 46.01646162255133, 36.1863005491143, 35.11202704625726, 34.202191898570874, 23.19220558722262, 21.81596642102272, 21.481609197873393, 21.260381619363876, 21.027189243245623, 18.048976589102736, 17.767196111409653, 15.80740407166365, 15.163994862702852, 14.952433246799666, 14.85423049141434, 14.68209941538482, 14.533304744600626, 14.287825829585556, 13.972406359935983, 13.484226919247394, 13.221402079145905, 13.087985009380114, 12.987867218028912, 12.861528107208926, 12.68914185492828, 12.596864770058962, 12.32684506171518, 12.166363452563134, 11.994341312060621, 11.533412331136002, 11.281399953775404, 10.862045609971053, 10.7872508024155, 10.690409182292715, 10.520480952908924, 10.27790534816626, 10.222035910170748, 10.150072048757767, 10.042438198552752, 9.992866307980925]
    # ssd_list = [504.74, 304.84, 207.11, 150.71, 115.02, 90.93, 71.87, 56.31, 47.38, 40.75, 36.12, 32.35, 29.14, 26.41, 23.94, 21.9, 20.09, 18.47, 17.12, 15.9, 14.81, 13.73, 12.78, 11.95, 11.01, 10.35, 9.75, 9.18, 8.66, 8.09, 7.62, 7.2, 6.81, 6.45, 6.13, 5.84, 5.57, 5.33, 5.1, 4.87, 4.67, 4.48, 4.3, 4.13, 3.97, 3.82, 3.66, 3.52, 3.4, 3.27, 3.15, 3.04, 2.93, 2.83, 2.73, 2.64, 2.55, 2.46, 2.32]



handler = DataHandling()
handler.matrices()
# sna_links(handler)
# se_year()
# hist_modes(handler, travel_times)
# hist_flows(handler)
# explore_se(data=handler.neighborhood_se)                           # create histograms of socioeconomic variables


handler.stat_prep(vars=census_variables)
geo_df = geopandas.GeoDataFrame(data=handler.model_,
                                crs=crs_proj,
                                geometry=geopandas.GeoSeries.from_wkt(handler.neighborhood_se.geometry))
geo_df.reset_index(inplace=True, drop=True)

w_queen = weights.Queen.from_dataframe(df=geo_df, geom_col='geometry')
cust_adj = Adj_Islands(geo_frame=geo_df, g_init=w_queen.to_networkx())

# clust_val(cust_adj=cust_adj, geo_df=geo_df)
plot_clust_val()
